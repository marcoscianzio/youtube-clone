generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  githubId    String    @id
  username    String    @unique
  email       String
  displayName String
  verified    Boolean   @default(false)
  description String?   @db.Text
  pic         String?   @db.Text
  banner      String?   @db.Text
  location    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  videos      Video[]   @relation("UserVideos")
  votes       Vote[]
  replies     Comment[] @relation("UserReplies")
  comments    Comment[] @relation("UserComments")
  subscribers User[]    @relation("UserSubscribes", references: [githubId])
  subscribed  User[]    @relation("UserSubscribes", references: [githubId])
  history     History[]
  seeLater    Video[]   @relation("UserSeeLater")


}

model Video {
  id          String    @id @default(uuid())
  file        String    @db.Text()
  title       String
  duration    Int
  views       Int       @default(0)
  thumbnail   String
  description String?
  createdAt   DateTime  @default(now())
  author      User      @relation("UserVideos", fields: [authorId], references: [githubId])
  authorId    String
  isPrivate   Boolean   @default(false)
  votes       Vote[]
  comments    Comment[]
  history     History[]
  seeLater    User[]    @relation("UserSeeLater")
}

model History {
  id      String   @id @default(uuid())
  video   Video    @relation(fields: [videoId], references: [id])
  videoId String
  user    User     @relation(fields: [userId], references: [githubId])
  userId  String
  addedAt DateTime @default(now())
}

model Vote {
  id        String   @id @default(uuid())
  value     Int
  videoId   String?
  video     Video?   @relation(fields: [videoId], references: [id])
  userId    String
  user      User?    @relation(fields: [userId], references: [githubId])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id              String    @id @default(uuid())
  content         String    @db.Text
  author          User      @relation("UserComments", fields: [authorId], references: [githubId])
  authorId        String
  video           Video     @relation(fields: [videoId], references: [id])
  videoId         String
  votes           Vote[]
  replies         Comment[] @relation("CommentToComment")
  parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id])
  parentCommentId String?
  repliedUser     User?     @relation("UserReplies", fields: [repliedUserId], references: [githubId])
  repliedUserId   String?
  createdAt       DateTime  @default(now())
  updateAt        DateTime  @updatedAt
}
